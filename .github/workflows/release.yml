name: Release

on:
  push:
    tags:
      - 'v*'
    branches:
      - main
      - develop

env:
  JAVA_VERSION: '21'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag or commit message
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Extract from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          TAG_NAME=$GITHUB_REF_NAME
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "trigger_type=tag" >> $GITHUB_OUTPUT
        else
          # Extract from commit message
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          echo "Checking commit message: $COMMIT_MSG"
          
          # Look for version patterns in commit message
          if [[ $COMMIT_MSG =~ v([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?) ]]; then
            VERSION="${BASH_REMATCH[1]}"
            TAG_NAME="v$VERSION"
            echo "Found version: $VERSION"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "trigger_type=commit" >> $GITHUB_OUTPUT
          else
            echo "No valid version pattern found in commit message: $COMMIT_MSG"
            echo "Expected format: v1.0.0, v2.1.3, v1.0.0-beta, etc."
            echo "Skipping release creation"
            exit 0
          fi
        fi
        
    - name: Create Release
      if: steps.version.outputs.version != ''
      env:
        GH_TOKEN: ${{ secrets.DEPLOYMENT_GITHUB_TOKEN }}
      run: |
        # Get the previous tag to determine commit range
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # Create release body header
        echo "## Auth Service Release ${{ steps.version.outputs.version }}" > release_body.md
        echo "" >> release_body.md
        echo "### 📝 Changes" >> release_body.md
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          # Generate release notes from commits since the last tag
          COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
          echo "Generating release notes from commits: $COMMIT_RANGE"
          
          # Add commit messages to release notes
          git log --pretty=format:"- %s" $COMMIT_RANGE >> release_body.md
        else
          # First release - include all commits
          echo "First release - including all commits"
          
          # Add all commit messages to release notes
          git log --pretty=format:"- %s" >> release_body.md
        fi
        
        # Add footer to release notes
        echo "" >> release_body.md
        echo "### 📦 Release Artifacts" >> release_body.md
        echo "- Source code tagged with version ${{ steps.version.outputs.version }}" >> release_body.md
        echo "- Maven artifacts available in GitHub Packages" >> release_body.md
        echo "" >> release_body.md
        echo "### 🔧 Build Instructions" >> release_body.md
        echo '```bash' >> release_body.md
        echo "mvn clean package -DskipTests" >> release_body.md
        echo "java -jar auth-service-web/target/auth-service-web-*.jar" >> release_body.md
        echo '```' >> release_body.md
        echo "" >> release_body.md
        echo "### 📝 Release Trigger" >> release_body.md
        if [[ "${{ steps.version.outputs.trigger_type }}" == "commit" ]]; then
          echo "This release was triggered by a commit message with version pattern." >> release_body.md
        else
          echo "This release was triggered by a git tag push." >> release_body.md
        fi
        
        # Create release using GitHub CLI
        gh release create ${{ steps.version.outputs.tag }} \
          --title "Auth Service ${{ steps.version.outputs.version }}" \
          --notes-file release_body.md \
          --draft=false \
          --prerelease=false

  deploy-to-packages:
    name: Deploy to GitHub Packages
    runs-on: ubuntu-latest
    needs: create-release
    if: needs.create-release.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version from tag or commit message
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ $COMMIT_MSG =~ v([0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          else
            echo "No valid version pattern found"
            exit 1
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build and Publish to GitHub Packages
      run: |
        # Set version in pom.xml files
        mvn versions:set -DnewVersion=${{ steps.version.outputs.version }}
        
        # Build and publish all modules
        mvn clean deploy \
          -DskipTests \
          -Dmaven.test.skip=true \
          -DaltDeploymentRepository=github::default::https://maven.pkg.github.com/${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.DEPLOYMENT_GITHUB_TOKEN }}
        
    - name: Upload JAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: auth-service-jars
        path: |
          auth-service-web/target/*.jar
          auth-service-core/target/*.jar
          auth-service-api/target/*.jar
        retention-days: 30

 
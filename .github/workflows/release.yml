name: Production Release

on:
  push:
    branches: [ master ]

jobs:
  release:
    name: Create Release & Deploy
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/master' && 
      !contains(github.event.head_commit.message, 'Merge release') && 
      !contains(github.event.head_commit.message, 'Bump version') &&
      !contains(github.event.head_commit.message, 'Release version')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Determine Release Type
      run: |
        # Check if this is a hotfix merge
        HOTFIX_COMMITS=$(git log --oneline --grep="Merge pull request.*hotfix/" -1)
        if [[ -n "$HOTFIX_COMMITS" ]]; then
          RELEASE_TYPE="hotfix"
          echo "🚨 Detected hotfix merge"
        else
          RELEASE_TYPE="regular"
          echo "📦 Regular release"
        fi
        
        # Set environment variables
        echo "RELEASE_TYPE=$RELEASE_TYPE" >> $GITHUB_ENV
        
    - name: Calculate Version
      run: |
        # Get current version from pom.xml
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current version: $CURRENT_VERSION"
        
        if [[ "$RELEASE_TYPE" == "hotfix" ]]; then
          # Hotfix: increment patch of last release
          git fetch --tags
          LATEST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -1)
          
          if [[ -z "$LATEST_TAG" ]]; then
            echo "❌ No previous release tag found. Cannot create hotfix."
            exit 1
          fi
          
          LATEST_VERSION=${LATEST_TAG#v}
          echo "Latest release tag: $LATEST_VERSION"
          
          MAJOR=$(echo $LATEST_VERSION | cut -d. -f1)
          MINOR=$(echo $LATEST_VERSION | cut -d. -f2)
          PATCH=$(echo $LATEST_VERSION | cut -d. -f3)
          NEW_PATCH=$((PATCH + 1))
          RELEASE_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "Hotfix release version: $RELEASE_VERSION"
          
          # For hotfix: keep current develop version (don't increment)
          NEXT_VERSION=$CURRENT_VERSION
          echo "Next development version (unchanged): $NEXT_VERSION"
        else
          # Regular: remove SNAPSHOT
          RELEASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//')
          echo "Regular release version: $RELEASE_VERSION"
          
          # For regular release: increment minor version
          NEXT_VERSION=$(echo $RELEASE_VERSION | awk -F. '{print $1"."$2+1".0-SNAPSHOT"}')
          echo "Next development version: $NEXT_VERSION"
        fi
        
        # Set environment variables
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_ENV
        echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
        
    - name: Build and Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Use versions from environment variables (set in Calculate Version step)
        echo "Current version: $CURRENT_VERSION"
        echo "Release version: $RELEASE_VERSION"
        echo "Next development version: $NEXT_VERSION"
        
        # Create release branch
        git checkout -b release/$RELEASE_VERSION
        
        # Update version to release version
        mvn versions:set -DnewVersion=$RELEASE_VERSION -DgenerateBackupPoms=false
        
        # Commit release version
        git add .
        git commit -m "Release version $RELEASE_VERSION"
        
        # Create tag
        git tag -a v$RELEASE_VERSION -m "Release version $RELEASE_VERSION"
        
        # Push release branch and tag
        git push origin release/$RELEASE_VERSION
        git push origin v$RELEASE_VERSION
        
        # Merge to master
        git checkout master
        git merge release/$RELEASE_VERSION --no-ff -m "Merge release $RELEASE_VERSION"
        git push origin master
        
        # Update develop branch with next version (only for regular releases)
        if [[ "$RELEASE_TYPE" == "regular" ]]; then
          echo "📈 Updating develop branch for next development cycle..."
          git checkout develop
          git pull origin develop
          
          # Update version to next development version
          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false
          
          # Commit next development version
          git add .
          git commit -m "Bump version to $NEXT_VERSION for next development cycle"
          git push origin develop
        else
          echo "🚨 Hotfix release - skipping develop branch update"
        fi
        
        # Clean up release branch
        git push origin --delete release/$RELEASE_VERSION

        # Return to master branch
        git checkout master
        
    - name: Build and Deploy Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Build without GPG signing
        mvn clean install -DskipTests
        
        # Build Docker image with release tag
        echo "🚀 Building docker release - skipped for now..."
        # docker build -t auth-service:$RELEASE_VERSION .
        # docker tag auth-service:$RELEASE_VERSION auth-service:latest
        
        # Deploy to production
        echo "🚀 Deploying to production..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/prod/
        
    - name: Publish to GitHub Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "📦 Publishing to GitHub Packages..."
        # Build and publish to GitHub Packages
        mvn clean deploy -DskipTests
        
    - name: Create GitHub Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Fetch all tags to ensure they're available
        git fetch --tags
        
        # Approach to find previous tag
        PREVIOUS_TAG="v$CURRENT_VERSION"
        
        # Use the previous tag for the commit range
        COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
        
        # Create release body header
        echo "## Auth Service Release $CURRENT_VERSION" > release_body.md
        echo "" >> release_body.md
        echo "### 📝 Changes" >> release_body.md
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          # Get all commit messages in the range, excluding all version bump commits
          COMMITS=$(git log --pretty=format:"- %s" $COMMIT_RANGE | grep -v "^- v[0-9]" || echo "")
          if [[ -z "$COMMITS" ]]; then
            echo "No changes since previous release." >> release_body.md
          else
            echo "$COMMITS" >> release_body.md
          fi
        else
          # First release - include all commits except version bump commits
          COMMITS=$(git log --pretty=format:"- %s" | grep -v "^- v[0-9]" || echo "")
          if [[ -z "$COMMITS" ]]; then
            echo "No changes since previous release." >> release_body.md
          else
            echo "$COMMITS" >> release_body.md
          fi
        fi
        
        # Add footer to release notes
        echo "" >> release_body.md
        echo "### 📦 Release Artifacts" >> release_body.md
        echo "- Source code tagged with version $CURRENT_VERSION" >> release_body.md
        echo "- Maven artifacts available in GitHub Packages" >> release_body.md
        echo "" >> release_body.md
        echo "### 🔧 Build Instructions" >> release_body.md
        echo '```bash' >> release_body.md
        echo "mvn clean package -DskipTests" >> release_body.md
        echo "java -jar auth-service-web/target/auth-service-web-*.jar" >> release_body.md
        echo '```' >> release_body.md
        echo "" >> release_body.md
        echo "### 📝 Release Trigger" >> release_body.md
        echo "This release was triggered by a push to the master branch." >> release_body.md
        
        # Create release using GitHub CLI
        gh release create v$CURRENT_VERSION \
          --title "Auth Service $CURRENT_VERSION" \
          --notes-file release_body.md \
          --draft=false \
          --prerelease=false
        
    - name: Run production tests
      run: |
        echo "🧪 Running production tests..."
        # Add your production test commands here
        # Example: mvn test -Dspring.profiles.active=prod
        
    - name: Monitor deployment
      run: |
        echo "📊 Monitoring deployment..."
        # Add your deployment monitoring commands here
        # Example: kubectl get pods -l app=auth-service 

name: Release

on:
  push:
    tags:
      - 'v*'

env:
  JAVA_VERSION: '21'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$GITHUB_REF_NAME" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.prod
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        build-args: |
          GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}
          GITHUB_USERNAME=${{ secrets.GITHUB_USERNAME }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag }}
        release_name: Auth Service ${{ steps.version.outputs.version }}
        body: |
          ## Auth Service Release ${{ steps.version.outputs.version }}
          
          ### üöÄ What's New
          - Authentication and authorization improvements
          - Security enhancements
          - Performance optimizations
          
          ### üì¶ Docker Image
          ```
          ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
          ```
          
          ### üîß Deployment
          ```bash
          export IMAGE_VERSION=${{ steps.version.outputs.version }}
          kubectl apply -f k8s/services/auth-service.yaml
          ```
        draft: false
        prerelease: false

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Configure Docker for GCR
      run: gcloud auth configure-docker
      
    - name: Get GKE credentials
      run: |
        gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_NAME }} \
          --zone ${{ secrets.GKE_CLUSTER_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }}
          
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
    - name: Deploy to production
      run: |
        export IMAGE_VERSION=${{ steps.version.outputs.version }}
        # Note: This assumes the k8s config is in the shared repo
        # You might need to clone the shared repo or have the config here
        echo "Deploying auth-service version $IMAGE_VERSION to production"
        
    - name: Wait for deployment
      run: |
        kubectl wait --for=condition=available --timeout=300s deployment/auth-service -n microservices
        
    - name: Verify deployment
      run: |
        kubectl get pods -n microservices | grep auth-service
        kubectl get services -n microservices | grep auth-service
        
    - name: Run health check
      run: |
        # Wait a bit for the service to be fully ready
        sleep 30
        
        # Get the external IP
        EXTERNAL_IP=$(kubectl get service auth-service -n microservices -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        if [ -n "$EXTERNAL_IP" ]; then
          echo "Testing health endpoint at http://$EXTERNAL_IP:8100/health"
          curl -f http://$EXTERNAL_IP:8100/health || exit 1
          echo "‚úÖ Health check passed"
        else
          echo "‚ö†Ô∏è External IP not available yet"
        fi
        
    - name: Notify deployment success
      if: success()
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ steps.version.outputs.version }}';
          const comment = `## üöÄ Production Deployment Complete
          
          ‚úÖ **Auth Service v${version}** has been successfully deployed to production!
          
          - **Image**: ghcr.io/${{ github.repository }}:${version}
          - **Deployment**: auth-service in microservices namespace
          - **Health Check**: ‚úÖ Passed
          
          The service is now live and ready to handle requests.`;
          
          // You could send this to a Slack channel or other notification system
          console.log(comment); 
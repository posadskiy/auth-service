name: Hotfix Release

on:
  push:
    branches: [ hotfix/* ]

jobs:
  hotfix:
    name: Hotfix Release & Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
    - name: Build and test
      run: |
        mvn clean compile test -B
        echo "✅ Build and tests completed successfully"
        
    - name: Security scan
      run: |
        mvn dependency:analyze
        echo "✅ Security scan completed"
        
    - name: Create hotfix release
      run: |
        # Get current version
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "Current version: $CURRENT_VERSION"
        
        # Remove -SNAPSHOT suffix for release
        RELEASE_VERSION=$(echo $CURRENT_VERSION | sed 's/-SNAPSHOT//')
        echo "Hotfix release version: $RELEASE_VERSION"
        
        # Update version to release version
        mvn versions:set -DnewVersion=$RELEASE_VERSION -DgenerateBackupPoms=false
        
        # Commit release version
        git add .
        git commit -m "Hotfix release version $RELEASE_VERSION"
        
        # Create tag
        git tag -a v$RELEASE_VERSION -m "Hotfix release version $RELEASE_VERSION"
        
        # Push tag
        git push origin v$RELEASE_VERSION
        
    - name: Build and Deploy Hotfix
      run: |
        # Build without GPG signing
        mvn clean install -DskipTests
        
        # Build Docker image with release tag
        # docker build -t auth-service:$RELEASE_VERSION .
        # docker tag auth-service:$RELEASE_VERSION auth-service:latest
        
        # Deploy to production
        echo "🚨 Deploying hotfix to production..."
        # Add your production deployment commands here
        # Example: kubectl apply -f k8s/prod/
        
    - name: Publish to GitHub Packages
      run: |
        # Set version in pom.xml files
        mvn versions:set -DnewVersion=$RELEASE_VERSION -DgenerateBackupPoms=false
        
        # Build and publish all modules
        mvn clean deploy \
          -DskipTests \
          -Dmaven.test.skip=true \
          -DaltDeploymentRepository=github::https://maven.pkg.github.com/${{ github.repository }}
        
    - name: Upload JAR artifacts
      uses: actions/upload-artifact@v4
      with:
        name: auth-service-hotfix-jars
        path: |
          auth-service-web/target/*.jar
          auth-service-core/target/*.jar
          auth-service-api/target/*.jar
        retention-days: 30
        
    - name: Create GitHub Release
      run: |
        # Fetch all tags to ensure they're available
        git fetch --tags
        
        # Get the previous tag to determine commit range
        CURRENT_VERSION="$RELEASE_VERSION"
        
        # More robust approach to find previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | while read tag; do
          if [[ "$tag" != "v$CURRENT_VERSION" ]]; then
            echo "$tag"
            break
          fi
        done)
        
        # Use the previous tag for the commit range
        COMMIT_RANGE="$PREVIOUS_TAG..HEAD"
        
        # Create release body header
        echo "## Auth Service Hotfix Release $CURRENT_VERSION" > release_body.md
        echo "" >> release_body.md
        echo "### 🚨 Emergency Fix" >> release_body.md
        echo "Critical bug fix for production - deployed immediately." >> release_body.md
        echo "" >> release_body.md
        echo "### 📝 Changes" >> release_body.md
        
        if [[ -n "$PREVIOUS_TAG" ]]; then
          # Get all commit messages in the range, excluding all version bump commits
          COMMITS=$(git log --pretty=format:"- %s" $COMMIT_RANGE | grep -v "^- v[0-9]" || echo "")
          if [[ -z "$COMMITS" ]]; then
            echo "No changes since previous release." >> release_body.md
          else
            echo "$COMMITS" >> release_body.md
          fi
        else
          # First release - include all commits except version bump commits
          COMMITS=$(git log --pretty=format:"- %s" | grep -v "^- v[0-9]" || echo "")
          if [[ -z "$COMMITS" ]]; then
            echo "No changes since previous release." >> release_body.md
          else
            echo "$COMMITS" >> release_body.md
          fi
        fi
        
        # Add footer to release notes
        echo "" >> release_body.md
        echo "### 📦 Release Artifacts" >> release_body.md
        echo "- Source code tagged with version $CURRENT_VERSION" >> release_body.md
        echo "- Maven artifacts available in GitHub Packages" >> release_body.md
        echo "" >> release_body.md
        echo "### 🔧 Build Instructions" >> release_body.md
        echo '```bash' >> release_body.md
        echo "mvn clean package -DskipTests" >> release_body.md
        echo "java -jar auth-service-web/target/auth-service-web-*.jar" >> release_body.md
        echo '```' >> release_body.md
        echo "" >> release_body.md
        echo "### 📝 Release Trigger" >> release_body.md
        echo "This hotfix release was triggered by a push to a hotfix branch." >> release_body.md
        
        # Create release using GitHub CLI
        gh release create v$CURRENT_VERSION \
          --title "Auth Service Hotfix $CURRENT_VERSION" \
          --notes-file release_body.md \
          --draft=false \
          --prerelease=true
        
    - name: Run production tests
      run: |
        echo "🧪 Running production tests..."
        # Add your production test commands here
        # Example: curl -f http://auth-service.example.com/health
        
    - name: Monitor deployment
      run: |
        echo "📊 Monitoring hotfix deployment..."
        # Add your monitoring commands here
        # Example: kubectl get pods -l app=auth-service
        
    - name: Merge to master and develop
      run: |
        # Merge hotfix to master
        git checkout master
        git merge hotfix/$RELEASE_VERSION --no-ff -m "Merge hotfix $RELEASE_VERSION"
        git push origin master
        
        # Merge hotfix to develop
        git checkout develop
        git merge hotfix/$RELEASE_VERSION --no-ff -m "Merge hotfix $RELEASE_VERSION"
        git push origin develop
        
        # Clean up hotfix branch
        git push origin --delete hotfix/$RELEASE_VERSION 
